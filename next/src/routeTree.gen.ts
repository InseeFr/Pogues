/* eslint-disable */
// @ts-nocheck
// noinspection JSUnusedGlobalSymbols
// This file was automatically generated by TanStack Router.
// You should NOT make any changes in this file as it will be overwritten.
// Additionally, you should also exclude this file from your linter and/or formatter to prevent it from being checked or modified.
// Import Routes
import { Route as rootRoute } from './routes/__root';
import { Route as AuthImport } from './routes/_auth';
import { Route as AuthQuestionnairesIndexImport } from './routes/_auth/questionnaires/index';
import { Route as AuthQuestionnairesNewImport } from './routes/_auth/questionnaires/new';
import { Route as AuthQuestionnairesRouteImport } from './routes/_auth/questionnaires/route';
import { Route as IndexImport } from './routes/index';
import { Route as QuestionnaireQuestionnaireIdCompositionImport } from './routes/questionnaire/$questionnaireId/composition';
import { Route as QuestionnaireQuestionnaireIdIndexImport } from './routes/questionnaire/$questionnaireId/index';
import { Route as QuestionnaireQuestionnaireIdMergeImport } from './routes/questionnaire/$questionnaireId/merge';
import { Route as QuestionnaireQuestionnaireIdTcmCompositionImport } from './routes/questionnaire/$questionnaireId/tcm-composition';

// Create/Update Routes

const AuthRoute = AuthImport.update({
  id: '/_auth',
  getParentRoute: () => rootRoute,
} as any);

const IndexRoute = IndexImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => rootRoute,
} as any);

const AuthQuestionnairesRouteRoute = AuthQuestionnairesRouteImport.update({
  id: '/questionnaires',
  path: '/questionnaires',
  getParentRoute: () => AuthRoute,
} as any);

const QuestionnaireQuestionnaireIdIndexRoute =
  QuestionnaireQuestionnaireIdIndexImport.update({
    id: '/questionnaire/$questionnaireId/',
    path: '/questionnaire/$questionnaireId/',
    getParentRoute: () => rootRoute,
  } as any);

const AuthQuestionnairesIndexRoute = AuthQuestionnairesIndexImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => AuthQuestionnairesRouteRoute,
} as any);

const QuestionnaireQuestionnaireIdTcmCompositionRoute =
  QuestionnaireQuestionnaireIdTcmCompositionImport.update({
    id: '/questionnaire/$questionnaireId/tcm-composition',
    path: '/questionnaire/$questionnaireId/tcm-composition',
    getParentRoute: () => rootRoute,
  } as any);

const QuestionnaireQuestionnaireIdMergeRoute =
  QuestionnaireQuestionnaireIdMergeImport.update({
    id: '/questionnaire/$questionnaireId/merge',
    path: '/questionnaire/$questionnaireId/merge',
    getParentRoute: () => rootRoute,
  } as any);

const QuestionnaireQuestionnaireIdCompositionRoute =
  QuestionnaireQuestionnaireIdCompositionImport.update({
    id: '/questionnaire/$questionnaireId/composition',
    path: '/questionnaire/$questionnaireId/composition',
    getParentRoute: () => rootRoute,
  } as any);

const AuthQuestionnairesNewRoute = AuthQuestionnairesNewImport.update({
  id: '/new',
  path: '/new',
  getParentRoute: () => AuthQuestionnairesRouteRoute,
} as any);

// Populate the FileRoutesByPath interface

declare module '@tanstack/react-router' {
  interface FileRoutesByPath {
    '/': {
      id: '/';
      path: '/';
      fullPath: '/';
      preLoaderRoute: typeof IndexImport;
      parentRoute: typeof rootRoute;
    };
    '/_auth': {
      id: '/_auth';
      path: '';
      fullPath: '';
      preLoaderRoute: typeof AuthImport;
      parentRoute: typeof rootRoute;
    };
    '/_auth/questionnaires': {
      id: '/_auth/questionnaires';
      path: '/questionnaires';
      fullPath: '/questionnaires';
      preLoaderRoute: typeof AuthQuestionnairesRouteImport;
      parentRoute: typeof AuthImport;
    };
    '/_auth/questionnaires/new': {
      id: '/_auth/questionnaires/new';
      path: '/new';
      fullPath: '/questionnaires/new';
      preLoaderRoute: typeof AuthQuestionnairesNewImport;
      parentRoute: typeof AuthQuestionnairesRouteImport;
    };
    '/questionnaire/$questionnaireId/composition': {
      id: '/questionnaire/$questionnaireId/composition';
      path: '/questionnaire/$questionnaireId/composition';
      fullPath: '/questionnaire/$questionnaireId/composition';
      preLoaderRoute: typeof QuestionnaireQuestionnaireIdCompositionImport;
      parentRoute: typeof rootRoute;
    };
    '/questionnaire/$questionnaireId/merge': {
      id: '/questionnaire/$questionnaireId/merge';
      path: '/questionnaire/$questionnaireId/merge';
      fullPath: '/questionnaire/$questionnaireId/merge';
      preLoaderRoute: typeof QuestionnaireQuestionnaireIdMergeImport;
      parentRoute: typeof rootRoute;
    };
    '/questionnaire/$questionnaireId/tcm-composition': {
      id: '/questionnaire/$questionnaireId/tcm-composition';
      path: '/questionnaire/$questionnaireId/tcm-composition';
      fullPath: '/questionnaire/$questionnaireId/tcm-composition';
      preLoaderRoute: typeof QuestionnaireQuestionnaireIdTcmCompositionImport;
      parentRoute: typeof rootRoute;
    };
    '/_auth/questionnaires/': {
      id: '/_auth/questionnaires/';
      path: '/';
      fullPath: '/questionnaires/';
      preLoaderRoute: typeof AuthQuestionnairesIndexImport;
      parentRoute: typeof AuthQuestionnairesRouteImport;
    };
    '/questionnaire/$questionnaireId/': {
      id: '/questionnaire/$questionnaireId/';
      path: '/questionnaire/$questionnaireId';
      fullPath: '/questionnaire/$questionnaireId';
      preLoaderRoute: typeof QuestionnaireQuestionnaireIdIndexImport;
      parentRoute: typeof rootRoute;
    };
  }
}

// Create and export the route tree

interface AuthQuestionnairesRouteRouteChildren {
  AuthQuestionnairesNewRoute: typeof AuthQuestionnairesNewRoute;
  AuthQuestionnairesIndexRoute: typeof AuthQuestionnairesIndexRoute;
}

const AuthQuestionnairesRouteRouteChildren: AuthQuestionnairesRouteRouteChildren =
  {
    AuthQuestionnairesNewRoute: AuthQuestionnairesNewRoute,
    AuthQuestionnairesIndexRoute: AuthQuestionnairesIndexRoute,
  };

const AuthQuestionnairesRouteRouteWithChildren =
  AuthQuestionnairesRouteRoute._addFileChildren(
    AuthQuestionnairesRouteRouteChildren,
  );

interface AuthRouteChildren {
  AuthQuestionnairesRouteRoute: typeof AuthQuestionnairesRouteRouteWithChildren;
}

const AuthRouteChildren: AuthRouteChildren = {
  AuthQuestionnairesRouteRoute: AuthQuestionnairesRouteRouteWithChildren,
};

const AuthRouteWithChildren = AuthRoute._addFileChildren(AuthRouteChildren);

export interface FileRoutesByFullPath {
  '/': typeof IndexRoute;
  '': typeof AuthRouteWithChildren;
  '/questionnaires': typeof AuthQuestionnairesRouteRouteWithChildren;
  '/questionnaires/new': typeof AuthQuestionnairesNewRoute;
  '/questionnaire/$questionnaireId/composition': typeof QuestionnaireQuestionnaireIdCompositionRoute;
  '/questionnaire/$questionnaireId/merge': typeof QuestionnaireQuestionnaireIdMergeRoute;
  '/questionnaire/$questionnaireId/tcm-composition': typeof QuestionnaireQuestionnaireIdTcmCompositionRoute;
  '/questionnaires/': typeof AuthQuestionnairesIndexRoute;
  '/questionnaire/$questionnaireId': typeof QuestionnaireQuestionnaireIdIndexRoute;
}

export interface FileRoutesByTo {
  '/': typeof IndexRoute;
  '': typeof AuthRouteWithChildren;
  '/questionnaires/new': typeof AuthQuestionnairesNewRoute;
  '/questionnaire/$questionnaireId/composition': typeof QuestionnaireQuestionnaireIdCompositionRoute;
  '/questionnaire/$questionnaireId/merge': typeof QuestionnaireQuestionnaireIdMergeRoute;
  '/questionnaire/$questionnaireId/tcm-composition': typeof QuestionnaireQuestionnaireIdTcmCompositionRoute;
  '/questionnaires': typeof AuthQuestionnairesIndexRoute;
  '/questionnaire/$questionnaireId': typeof QuestionnaireQuestionnaireIdIndexRoute;
}

export interface FileRoutesById {
  __root__: typeof rootRoute;
  '/': typeof IndexRoute;
  '/_auth': typeof AuthRouteWithChildren;
  '/_auth/questionnaires': typeof AuthQuestionnairesRouteRouteWithChildren;
  '/_auth/questionnaires/new': typeof AuthQuestionnairesNewRoute;
  '/questionnaire/$questionnaireId/composition': typeof QuestionnaireQuestionnaireIdCompositionRoute;
  '/questionnaire/$questionnaireId/merge': typeof QuestionnaireQuestionnaireIdMergeRoute;
  '/questionnaire/$questionnaireId/tcm-composition': typeof QuestionnaireQuestionnaireIdTcmCompositionRoute;
  '/_auth/questionnaires/': typeof AuthQuestionnairesIndexRoute;
  '/questionnaire/$questionnaireId/': typeof QuestionnaireQuestionnaireIdIndexRoute;
}

export interface FileRouteTypes {
  fileRoutesByFullPath: FileRoutesByFullPath;
  fullPaths:
    | '/'
    | ''
    | '/questionnaires'
    | '/questionnaires/new'
    | '/questionnaire/$questionnaireId/composition'
    | '/questionnaire/$questionnaireId/merge'
    | '/questionnaire/$questionnaireId/tcm-composition'
    | '/questionnaires/'
    | '/questionnaire/$questionnaireId';
  fileRoutesByTo: FileRoutesByTo;
  to:
    | '/'
    | ''
    | '/questionnaires/new'
    | '/questionnaire/$questionnaireId/composition'
    | '/questionnaire/$questionnaireId/merge'
    | '/questionnaire/$questionnaireId/tcm-composition'
    | '/questionnaires'
    | '/questionnaire/$questionnaireId';
  id:
    | '__root__'
    | '/'
    | '/_auth'
    | '/_auth/questionnaires'
    | '/_auth/questionnaires/new'
    | '/questionnaire/$questionnaireId/composition'
    | '/questionnaire/$questionnaireId/merge'
    | '/questionnaire/$questionnaireId/tcm-composition'
    | '/_auth/questionnaires/'
    | '/questionnaire/$questionnaireId/';
  fileRoutesById: FileRoutesById;
}

export interface RootRouteChildren {
  IndexRoute: typeof IndexRoute;
  AuthRoute: typeof AuthRouteWithChildren;
  QuestionnaireQuestionnaireIdCompositionRoute: typeof QuestionnaireQuestionnaireIdCompositionRoute;
  QuestionnaireQuestionnaireIdMergeRoute: typeof QuestionnaireQuestionnaireIdMergeRoute;
  QuestionnaireQuestionnaireIdTcmCompositionRoute: typeof QuestionnaireQuestionnaireIdTcmCompositionRoute;
  QuestionnaireQuestionnaireIdIndexRoute: typeof QuestionnaireQuestionnaireIdIndexRoute;
}

const rootRouteChildren: RootRouteChildren = {
  IndexRoute: IndexRoute,
  AuthRoute: AuthRouteWithChildren,
  QuestionnaireQuestionnaireIdCompositionRoute:
    QuestionnaireQuestionnaireIdCompositionRoute,
  QuestionnaireQuestionnaireIdMergeRoute:
    QuestionnaireQuestionnaireIdMergeRoute,
  QuestionnaireQuestionnaireIdTcmCompositionRoute:
    QuestionnaireQuestionnaireIdTcmCompositionRoute,
  QuestionnaireQuestionnaireIdIndexRoute:
    QuestionnaireQuestionnaireIdIndexRoute,
};

export const routeTree = rootRoute
  ._addFileChildren(rootRouteChildren)
  ._addFileTypes<FileRouteTypes>();

/* ROUTE_MANIFEST_START
{
  "routes": {
    "__root__": {
      "filePath": "__root.tsx",
      "children": [
        "/",
        "/_auth",
        "/questionnaire/$questionnaireId/composition",
        "/questionnaire/$questionnaireId/merge",
        "/questionnaire/$questionnaireId/tcm-composition",
        "/questionnaire/$questionnaireId/"
      ]
    },
    "/": {
      "filePath": "index.tsx"
    },
    "/_auth": {
      "filePath": "_auth.tsx",
      "children": [
        "/_auth/questionnaires"
      ]
    },
    "/_auth/questionnaires": {
      "filePath": "_auth/questionnaires/route.tsx",
      "parent": "/_auth",
      "children": [
        "/_auth/questionnaires/new",
        "/_auth/questionnaires/"
      ]
    },
    "/_auth/questionnaires/new": {
      "filePath": "_auth/questionnaires/new.tsx",
      "parent": "/_auth/questionnaires"
    },
    "/questionnaire/$questionnaireId/composition": {
      "filePath": "questionnaire/$questionnaireId/composition.tsx"
    },
    "/questionnaire/$questionnaireId/merge": {
      "filePath": "questionnaire/$questionnaireId/merge.tsx"
    },
    "/questionnaire/$questionnaireId/tcm-composition": {
      "filePath": "questionnaire/$questionnaireId/tcm-composition.tsx"
    },
    "/_auth/questionnaires/": {
      "filePath": "_auth/questionnaires/index.tsx",
      "parent": "/_auth/questionnaires"
    },
    "/questionnaire/$questionnaireId/": {
      "filePath": "questionnaire/$questionnaireId/index.tsx"
    }
  }
}
ROUTE_MANIFEST_END */
